SWE 525 Version Control Git Homework 2    08/23/2016

Please complete the following homework and submit it on EMS. Also push your repo to git and put your github repo link in your assignment. Complete this homework before May 3 2016.

Part A. You will create a local repository and perform basic operations on it.

Link to GitHub: https://github.com/shrutikamati/SWE525HW2

Create (somewhere on your computer) a new empty folder named SWE525Hw2. In that folder, create a plain text file with your name and student ID # on a single line. Don't use MS Word for this, use a text editor, for example Notepad or TextEdit (you may need to choose Plain Text under Format or Preferences). Save the file as file1.txt.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~
$ mkdir SWE525Hw2

kamat@SHRUTI-ThinkPad MINGW64 ~
$ cd SWE525Hw2/

kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2
$ vi file1.txt

1	In your Git shell, navigate to any folder. Use the cd command to change your current folder/directory. Note that the Windows Git Bash shell follows Unix/Linux shell conventions so if you're on Windows, you still need to use Linux-style paths with forward slashes (e.g., c:\my_folder\my_subfolder would be /c/my_folder/my_subfolder). Linux commands like ls, pwd, and grep should all work in the Git Bash shell.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2
$ ls
file1.txt

kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2
$ pwd
/c/Users/kamat/SWE525Hw2

kamat@SHRUTI-ThinkPad MINGW64 ~
$ cd ..

kamat@SHRUTI-ThinkPad MINGW64 /c/Users
$ ls
'All Users'@  Default/  'Default User'@  desktop.ini  kamat/  Public/

kamat@SHRUTI-ThinkPad MINGW64 /c/Users
$ cd public

2	Note: At this point you may find that Git wants you to tell it your name and email address. You can do this with two commands like these: 
◦	git config --global user.name "Peter Anteater"
◦	git config --global user.email "panteat@itu.edu"
◦	To look at all your configuration information: git config --global -1
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2
$ git config --global user.name "Shruti Kamati"

kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2
$ git config --global user.email "kamatishruti@gmail.com
> q
> ^C

kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2
$ git config --global user.email "kamatishruti@gmail.com"

3	Create a local Git repo by running the command git init.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2
$ git init
Initialized empty Git repository in C:/Users/kamat/SWE525Hw2/.git/


4	Run git status. Note that file1.txt is listed as untracked. We want Git to track it, so run git add file1.txt. When you "add" a file you are telling Git to keep track of it. "add" also tells Git to stage the file, which means put it in the stage of being ready to be committed. 
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git status
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        file1.txt

nothing added to commit but untracked files present (use "git add" to track)

kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git add file1.txt

5	Run git status again. Note that file1.txt is now listed as a file to be committed (i.e., it's staged).
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git status
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   file1.txt


6	Let's commit file1.txt to our repository. Run git commit -m "Committing a new file with my name". When you "commit,", you in effect copy all staged files to the repository. The "-m" is a flag (that's what the hyphen indicates) which tells Git that the following string is a message to record with the commit.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git commit -m "committing the file with my name "
[master (root-commit) 68ff710] committing the file with my name
 1 file changed, 2 insertions(+)
 create mode 100644 file1.txt


7	Run git log. This will display the history of changes made to the repository. The one and only entry will be for the commit of file1.txt you just did.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git log
commit 68ff7100bbf272323ad0761a82e5dcd71a76aea6
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:30:21 2016 -0700

    committing the file with my name

8	Edit file1.txt and change the spelling of your name to something incorrect. Save file1.txt with the error. (This small error stands in for a long complex series of edits that you want to undo.)
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ vi file1.txt


9	Run git reset --hard. "reset --hard" removes all uncommitted changes, so all files in the repo will return to their contents as of the latest commit. There are many ways to undo changes in git, and "reset --hard" is generally considered to be dangerous. Look at file1.txt and observe the effect of reset --hard.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git reset --hard
HEAD is now at 68ff710 committing the file with my name


10	Edit file1.txt to remove your student ID# and include the name of your major, and save the file.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ vi file1.txt


11	Commit with git commit -m "Now has my major". This doesn't work. Git tells you there are "changes not staged for commit".
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git commit -m "Now has my major"
On branch master
Changes not staged for commit:
        modified:   file1.txt

no changes added to commit


12	Try again with git commit -a -m "Now has my major". The power of the "-a" flag is that it tells git to automatically stage all tracked, modified files before the commit.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git commit -a -m "Now has my major"
[master 5b6a5b6] Now has my major
 1 file changed, 1 insertion(+), 1 deletion(-)


13	You can also explicitly stage a file. Add the name of your favorite restaurant and favorite movie to to file1.txt, save it, and run git stage file1.txt. Now run git commit -m "Added favorite restaurant" to commit. "git stage" is really just another name for "git add".
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git add .

kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git commit -m " ADDED favorite restaurant"
[master 00ad52f]  ADDED favorite restaurant
 1 file changed, 2 insertions(+)


14	You set the commit message to "Added favorite restaurant", but the file also includes your favorite movie, so maybe we should have included that in our commit message. Amend your commit message with git commit --amend -m "Added favorite restaurant and movie".
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git commit --amend -m "Added favorite restaurant and movie"
[master d1b5db8] Added favorite restaurant and movie
 Date: Tue Aug 30 11:38:29 2016 -0700
 1 file changed, 2 insertions(+)


15	Run git log to make sure you have successfully changed history.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git log
commit d1b5db8709d8af5e89e5ec646c962f3625c0c959
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:38:29 2016 -0700

    Added favorite restaurant and movie

commit 5b6a5b60336debff02c6283f178009610617a201
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:35:43 2016 -0700

    Now has my major

commit 68ff7100bbf272323ad0761a82e5dcd71a76aea6
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:30:21 2016 -0700

    committing the file with my name


16	You removed your student ID# a few steps back. Let that edit stand in for deleting, a few months ago, a block of code that you now want to examine. git will help you go back in time. Note that each commit has long, seemingly random, string of hexadecimal digits associated with it. This is called a "hash" and is a unique identifier for the commit. Find the hash associated with the “Committing a new file with my name“ commit. Run git checkout xxxx, replacing xxxx with the first four digits from that hash (thankfully typing in the entire hash is not required). You will see a frightening message about a detached HEAD.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 ((68ff710...))
$ git checkout 68ff7
HEAD is now at 68ff710... committing the file with my name


17	git can keep track of separate, parallel, streams of edits to a project. Each stream of edits is called a branch, and a branch can have a name. For instance, multiple programmers who are working on and commiting changes to the same file will probably establish different branches. HEAD is git-ese for the current (not necessarily the last) commit in the current branch. Since we've gone back in time and are potentially (but haven't yet) starting a new branch, HEAD is "detached" (from any established, named branch). Ouch!
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 ((68ff710...))
$

18	Take a look at file1.txt and note the later-deleted Student ID#. Now to return to the present: git checkout master. "master" is the name of the default branch created when the repository was made. Look at file1.txt again. Run git log again and you'll see it has the same three commits.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 ((68ff710...))
$ git checkout master
Previous HEAD position was 68ff710... committing the file with my name
Switched to branch 'master'

kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ vi file1.txt

kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git log
commit d1b5db8709d8af5e89e5ec646c962f3625c0c959
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:38:29 2016 -0700

    Added favorite restaurant and movie

commit 5b6a5b60336debff02c6283f178009610617a201
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:35:43 2016 -0700

    Now has my major

commit 68ff7100bbf272323ad0761a82e5dcd71a76aea6
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:30:21 2016 -0700

    committing the file with my name


19	Create a new text file called file2.txt that contains your expected graduation year and first job title on a single line.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ vi file2.txt


20	Stage file2.txt, and then commit it with a useful message.
ANS:
kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git add .
warning: LF will be replaced by CRLF in file2.txt.
The file will have its original line endings in your working directory.

kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git commit -m " committing file2 with graduation year and job title in it"
[master 7007ed4]  committing file2 with graduation year and job title in it
 1 file changed, 1 insertion(+)
 create mode 100644 file2.txt


21	Run git log. Notice that you see log entries for both commits that you've performed.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git log
commit 7007ed4ede7e3239b69d3e6f5cd70b8c272c963a
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:47:38 2016 -0700

     committing file2 with graduation year and job title in it

commit d1b5db8709d8af5e89e5ec646c962f3625c0c959
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:38:29 2016 -0700

    Added favorite restaurant and movie

commit 5b6a5b60336debff02c6283f178009610617a201
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:35:43 2016 -0700

    Now has my major

commit 68ff7100bbf272323ad0761a82e5dcd71a76aea6
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:30:21 2016 -0700

    committing the file with my name


22	Run git log file2.txt. Notice that you only see the log entry involving file2.txt.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git log file2.txt
commit 7007ed4ede7e3239b69d3e6f5cd70b8c272c963a
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:47:38 2016 -0700

     committing file2 with graduation year and job title in it


23	Modify file1.txt to have the name of your favorite color on a new line.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ vi file1.txt


24	Delete file2.txt.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git rm file2.txt
rm 'file2.txt'



25	Run git status. Note that file2.txt is listed as deleted. Also note that the status information helpfully says "git add/rm ..." to update what will be committed.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        deleted:    file2.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   file1.txt


26	You use the git add command to stage a new or modified file. However, to stage the deletion of a file, you need to use the git rm command. So run the commands git add file1.txt and git rm file2.txt to set the stage.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git add file1.txt
kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git rm file2.txt
rm 'file2.txt'



27	Commit the changes with the commit message "Deleting file2.txt". 	
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git commit -m "deleting file2.txt"
[master 6d8c37a] deleting file2.txt
 2 files changed, 1 insertion(+), 1 deletion(-)
 delete mode 100644 file2.txt


28	Run the command git log -p -3. The -p flag will show you the diffs for each change. The -3 will limit what's displayed to the last 3 log entries. Take a few minutes to look carefully at the output log and see if you can figure out how to interpret it.
◦	Note: A command such as git log sends text output to the shell using a bash command named "less" to display one windowfull of output at a time ("less" is named after a similar, earlier utility named "more", in a classic example of hilarious techie humor). At the : prompt, you can press h for help, q to exit, Enter to advance one line, or Space to advance one screenfull.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git log -p -3
commit 6d8c37aed4fc96f821f9c3c3bafd5027a087f5c6
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:54:45 2016 -0700

    deleting file2.txt

diff --git a/file1.txt b/file1.txt
index 459f3e3..658613a 100644
--- a/file1.txt
+++ b/file1.txt
@@ -2,3 +2,4 @@ Shruti A Kamati
 Software engineering
 Greens restaurant
 Persuit f Happiness
+Black
diff --git a/file2.txt b/file2.txt
deleted file mode 100644
index e40f760..0000000
--- a/file2.txt
+++ /dev/null
@@ -1 +0,0 @@
-2017 trainee

29	Now you decide you actually wanted to keep file2.txt, but you deleted it! Fortunately, you had added it to git, so you can still get it back. There are several ways to do this. The simplest is probably to use the command git checkout HEAD~1 file2.txt. What does this do? HEAD represents the most recent commit or snapshot. ~1 tells Git to go back one version from the most recent snapshot (i.e., HEAD). In this older snapshot, file2.txt still existed, and checkout tells Git to retrieve it. If you now look in your folder, you'll see file2.txt. And is file1.txt changed?
ANS:
30	Run git add file2.txt to stage file2.
ANS:
kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git add .

31	Run git status. Note that file2.txt is staged. Commit it with the commit message "Re-adding file2.txt".
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   file2.txt


kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git commit -m "readding file2.txt"
[master 03ddd65] readding file2.txt
 1 file changed, 2 insertions(+)
 create mode 100644 file2.txt


32	Run the command git log -p to see all of the log entries.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git log -p
commit 03ddd65415c30060233e49c1f336edbefd474c80
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 12:02:08 2016 -0700

    readding file2.txt

diff --git a/file2.txt b/file2.txt
new file mode 100644
index 0000000..c1a9102
--- /dev/null
+++ b/file2.txt
@@ -0,0 +1,2 @@
+2017
+tainee

commit 6d8c37aed4fc96f821f9c3c3bafd5027a087f5c6
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:54:45 2016 -0700

    deleting file2.txt

diff --git a/file1.txt b/file1.txt
index 459f3e3..658613a 100644
:

33	Now run the command git log -p > git_log_partB.txt. (The > is a shell command that redirects the output of the program on >'s left to the file named on >'s right.)
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ git log -p > git_log_partB.txt


34	Open git_log_partB.txt. It should like just like the output you saw for step 33. If you're on Windows and viewing it in Notepad, the spacing will probably look wrong, so try opening it in a different text editor (like Wordpad or Notepad++).
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/SWE525Hw2 (master)
$ vi git_log_partB.txt


35	Upload git_log_partB.txt to the EMS by deadline
ANS: commit 03ddd65415c30060233e49c1f336edbefd474c80
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 12:02:08 2016 -0700

    readding file2.txt

diff --git a/file2.txt b/file2.txt
new file mode 100644
index 0000000..c1a9102
--- /dev/null
+++ b/file2.txt
@@ -0,0 +1,2 @@
+2017
+tainee

commit 6d8c37aed4fc96f821f9c3c3bafd5027a087f5c6
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:54:45 2016 -0700

    deleting file2.txt

diff --git a/file1.txt b/file1.txt
index 459f3e3..658613a 100644
--- a/file1.txt
+++ b/file1.txt
@@ -2,3 +2,4 @@ Shruti A Kamati
 Software engineering
 Greens restaurant
 Persuit f Happiness
+Black
diff --git a/file2.txt b/file2.txt
deleted file mode 100644
index e40f760..0000000
--- a/file2.txt
+++ /dev/null
@@ -1 +0,0 @@
-2017 trainee

commit 7007ed4ede7e3239b69d3e6f5cd70b8c272c963a
Author: Shruti Kamati <kamatishruti@gmail.com>
Date:   Tue Aug 30 11:47:38 2016 -0700

     committing file2 with graduation year and job title in it

diff --git a/file2.txt b/file2.txt
new file mode 100644
index 0000000..e40f760
--- /dev/null
+++ b/file2.txt
@@ -0,0 +1 @@
+2017 trainee


Part B. Much of Git's power comes from the interaction between your local repository and remote repositories. Remote Git repositories help you collaborate with others on a software project.
There are several services out there that will host a remote git repository for you for free, the most popular of which is GitHub.com. GitHub.com is particularly popular among the open source community, and there are pieces of software you probably use every day that are hosted on GitHub.com. Reddit is one such software (web application) that is maintained on Github
1	Let's use git to view the Reddit source code repository hosted on GitHub. Start git, use cd to navigate to an empty folder, and run the command git clone https://github.com/reddit/reddit.git.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/assignment2
$ git clone https://github.com/reddit/reddit.git
Cloning into 'reddit'...
remote: Counting objects: 71282, done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 71282 (delta 0), reused 0 (delta 0), pack-reused 71275
Receiving objects: 100% (71282/71282), 36.81 MiB | 4.25 MiB/s, done.
Resolving deltas: 100% (57839/57839), done.
Checking connectivity... done.


2	You now have a local copy (on your computer) of the remote repository. It's important to understand that this is not only a copy of the source code, but also a copy of the history of changes stored by git. And since it's a local repository, all the commands you used in the previous part of the assignment will work. To try this out, run the command cd reddit to go inside the reddit project folder, then run git log. This shows you the most recent log messages for changes made to the Reddit source code.
ANS:
kamat@SHRUTI-ThinkPad MINGW64 ~/assignment2/reddit (master)
$ git log
commit 1b4425a137b68c348853e892384be1bfb00c58f5
Author: Brian Simpson <bsimpson63@gmail.com>
Date:   Mon Aug 29 11:29:51 2016 -0700

    PermalinkCommentOrderer: handle ancestor missing from tree

    PermalinkCommentOrderer will walk up the comment tree if context is
    requested (i.e. context=2 means show the two ancestors of the requested
    comment). If an ancestor comment is missing from the tree we will now
    fail cleanly and fall back to the regular CommentOrderer.

    This situation can arise when there are multiple commentstree_q consumers,
    causing a child comment to be added to the comment tree before its parent.

commit b8b8445220ea3c802573f3f8e57878f324b2848f
Author: Brian Simpson <bsimpson63@gmail.com>
Date:   Mon Jul 25 17:01:34 2016 -0700

    Use IPNetworkLiveList for g.throttles

commit 50560d1b7dea8c94c035f3ef0a99af53a0bba1a0
Author: Brian Simpson <bsimpson63@gmail.com>
Date:   Mon Jul 25 16:59:47 2016 -0700

kamat@SHRUTI-ThinkPad MINGW64 ~/assignment2/reddit (master)
$

3	Here's another variation on the git log command to try: git log -1 -p --before='2014-03-31 11:52:45'. This is nothing new except for the --before='2014-03-31 11:52:45' part. That tells git you only want to see log entries for changes made before March 31, 2014 at 11:52:45am. As you saw in part B, the -1 means you only want to see one entry, and the -p means you want to see a diff of the changes. As you can see, a contributor named "Andre D" changed the mouseover property to "cancelTimeout" from "queueShow" in the file r2/r2/public/static/js/saved.js.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/assignment2/reddit (master)
$ git log -1 -p --before='2014-03-31 11:52:45'
commit 2043e5ea641bed1339441e186d13274dd05f5765
Author: Andre D <Andre@andred.ca>
Date:   Wed Mar 12 20:02:01 2014 -0400

    saved: Fix being unable to open dropdown.

diff --git a/r2/r2/public/static/js/saved.js b/r2/r2/public/static/js/saved.js
index 40990f8..c433c1c 100644
--- a/r2/r2/public/static/js/saved.js
+++ b/r2/r2/public/static/js/saved.js
@@ -24,7 +24,7 @@ r.saved.SaveDialog = r.ui.Bubble.extend({
         "click": "clicked",
         "submit": "save",
         "mouseout": "mouseout",
-        "mouseover": "queueShow",
+        "mouseover": "cancelTimeout",
         "change select": "change"
     },



4	Since we have a complete copy of the Reddit project's repository, we also have a copy of every snapshot going all the way back to the beginning of the project. To see the log entries for the earliest commits, run the command git log –reverse
ANS:
kamat@SHRUTI-ThinkPad MINGW64 ~/assignment2/reddit (master)
$ git log --reverse
commit 4778b17e939e119417cc5ec25b82c4e9a65621b2
Author: KeyserSosa <chris@reddit.com>
Date:   Tue Jun 17 19:00:27 2008 -0700

    initial checkin

commit 836f7b9cc89cc9fecf90f72b156abc7c44e35700
Author: KeyserSosa <chris@reddit.com>
Date:   Tue Jun 17 19:28:35 2008 -0700

    we don't use lighttpd anymore

commit 8dc5955b87fe33de18304adc9c65b2b9d86b9831
Author: shuffman <shuffman@shuffman.local>
Date:   Tue Jun 17 21:43:15 2008 -0700

    probably should have learned how to use git sooner

commit 011a8996469d653df9449805d4eb57e276c3500c
Author: ketralnis <ketralnis@reddit.com>
Date:   Tue Jun 17 22:53:01 2008 -0700

    solrsearch.changed() should use SelfEmptyingCache to avoid thrashing swap af:

5	Recall that each commit is given a unique hash (aka SHA1). Many commands in Git can take a hash as input. For example, try git log -1 4778b17e939e119417cc5ec25b82c4e9a65621b2 and git show 4778b17e939e119417cc5ec25b82c4e9a65621b2. (Don't forget that you can use only the first four digits of the hash. If git complains that the short SHA1 is ambiguous (because more than one commit has the same first four digits), try adding a few more digits from the long hash.)
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/assignment2/reddit (master)
$ git log -1 4778b17e939e119417cc5ec25b82c4e9a65621b2
commit 4778b17e939e119417cc5ec25b82c4e9a65621b2
Author: KeyserSosa <chris@reddit.com>
Date:   Tue Jun 17 19:00:27 2008 -0700

    initial checkin

kamat@SHRUTI-ThinkPad MINGW64 ~/assignment2/reddit (master)
$ git show
commit 1b4425a137b68c348853e892384be1bfb00c58f5
Author: Brian Simpson <bsimpson63@gmail.com>
Date:   Mon Aug 29 11:29:51 2016 -0700

    PermalinkCommentOrderer: handle ancestor missing from tree

    PermalinkCommentOrderer will walk up the comment tree if context is
    requested (i.e. context=2 means show the two ancestors of the requested
    comment). If an ancestor comment is missing from the tree we will now
    fail cleanly and fall back to the regular CommentOrderer.

    This situation can arise when there are multiple commentstree_q consumers,
    causing a child comment to be added to the comment tree before its parent.

diff --git a/r2/r2/models/builder.py b/r2/r2/models/builder.py
index 58aab7a..2ad11e1 100644
--- a/r2/r2/models/builder.py
+++ b/r2/r2/models/builder.py
@@ -1225,20 +1225,27 @@ class PermalinkCommentOrderer(CommentOrdererBase):

         Restrict the path to a maximum of `context` levels deep."""

+        if comment._id not in comment_tree.cids:


6	One more git log option to know about is --skip=N, where N is a non-negative integer. This means to skip N commits before starting to show the commit output. Try git log --skip=100 -5.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/assignment2/reddit (master)
$ git log --skip=100 -5
commit 6f78328c5d5cebf9adfc16cc569810e33ebb6bde
Author: Brian Simpson <bsimpson63@gmail.com>
Date:   Fri Jun 3 17:17:22 2016 -0700

    VOneTimePassword: Use g.gencache to check for code reuse

commit cf73f43adc8276f5c161528376fdbcd7b760c979
Author: Brian Simpson <bsimpson63@gmail.com>
Date:   Fri Jun 3 14:27:31 2016 -0700

    api: Use g.gencache for storing otp secret

commit e81a93cba4ef4c3769d1ecc47716cbbd89fde9d3
Author: Brian Simpson <bsimpson63@gmail.com>
Date:   Fri Jun 3 13:49:40 2016 -0700

    Add g.gencache for moving keys to mcrouter but still in the g.cache pool

commit 1a452edf8128461caa7cbad6203ab522fc6a1603
Author: Chris Slowe <chris@reddit.com>
Date:   Mon Jun 20 10:53:59 2016 -0700

    Re-allow announcements ("stickies") to apply to any type of link.


7	Run a log showing five commits to Reddit, skipping the first N commits, where N is the first three digits of your ITU student id number. For instance, if your id is 12345678, then N is 123. Leading zeros are no problem. Redirect the log output to a text file and upload it to EMS by deadline.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/assignment2/reddit (master)
$ git log --skip=200-4
commit 264efaf129591b905e08337905c5c0752de502e3
Author: Jack Niu <jack.niu@reddit.com>
Date:   Wed May 18 16:53:14 2016 -0700

    hide delete button from mod/admin if they are not receiver

commit ce30c1c7a077b4da74db00420282852983164829
Author: Jack Niu <jack.niu@reddit.com>
Date:   Tue May 17 13:39:45 2016 -0700

    fix bug on message/inbox and message/messages for admin

commit 734433664d580ee85b8732b8350d031a52580bb6
Author: Jack Niu <jack.niu@reddit.com>
Date:   Wed May 18 14:53:25 2016 -0700

    support PM delete opration on Recipient side only

commit 90ce14b6e5a3f8b3726ae6ce7178df847caa42eb
Author: Brian Simpson <bsimpson63@gmail.com>
Date:   Tue May 17 15:44:08 2016 -0700

    Rename g.maincache to g.thingcache


8	If you wanted (and had the permissions), you could modify part of the Reddit source, commit your changes (on your local repo), and then use git push to copy your local branch back to the GitHub repository. That's beyond the scope of Informatics 43, but it's good to know that git is a sophisticated tool that facilitates multiple people updating shared files, logging their updates, and assisting with the resolution of updates that conflict.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/assignment2/reddit (master)
$ git push
remote: Permission to reddit/reddit.git denied to shrutikamati.


Part C.
You should write your homework in a file called hw2.txt. Submit your homework via git as described in the last question. Put your git link in the homework.

Create a new git repository somewhere in your filesystem, and configure a remote (called whatever you want, 

What command did you use to configure the remote?
Instead of creating a new git repository and configuring it with this remote, I could have asked you to git clone the repo from afs. If you had done so, what would the output of git remote -v be?


Link to GitHub: https://github.com/shrutikamati/hw2


kamat@SHRUTI-ThinkPad MINGW64 ~/hw2
$ git clone https://github.com/shrutikamati/hw2.git
Cloning into 'hw2'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
Checking connectivity... done.

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (master)
$ git remote -v

Run git fetch remotename (substituting your remote name for remotename).
kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (master)
$ git fetch origin
fatal: 'origin' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (master)
$ git remote add origin https://github.com/shrutikamati/hw2.git

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (master)
$ git fetch origin
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/shrutikamati/hw2
 * [new branch]      master     -> origin/master


Did anything appear in your working directory? Why?
Update your local master branch with the remote one, and give the command you used to do so.
kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (master)
$ git pull origin master
From https://github.com/shrutikamati/hw2
 * branch            master     -> FETCH_HEAD


Your working directory should have been updated. You should check that. That means the master branch was updated on the remote. But it's possible that when we ran git fetch, we fetched other branches as well! How could we (i.e. what command could we use) find all the branches we may have gotten from the remote?
Spoiler: there's another branch. Check it out, find the file on that branch, and give the first five letters of that file as well as the command you used to checkout the branch. NOTE: It's very bad practice to directly git checkout the remote-tracking branch. Instead, try to checkout the branch so that it creates a local branch based on the remote-tracking branch. If you're not sure how (it's pretty easy to guess, though), you can look it up.
You're going to be submitting your homework on the master branch, so you may want to git checkout back there.
kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (master)
$ git branch
* master

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (master)
$ git branch -a
* master
  remotes/origin/master
  remotes/origin/newbranch

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (master)
$ git branch -r
  origin/master
  origin/newbranch

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (master)
$ git checkout newbranch
Branch newbranch set up to track remote branch newbranch from origin.
Switched to a new branch 'newbranch'

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (newbranch)
$ git checkout master
Switched to branch 'master'


What is a bare repository? What makes it different from normal repositories? In what situations is it used?
ANS : A repository which has only version control information with no working trees is a bare repository.  It is mostly kind of a central repository which is used for sharing, pushing and pulling.

In lecture, I was careful to explain the two-step procedure of using git fetch and git merge remotename/branchname to get commits from a remote. When would this be a good idea as opposed to simply doing git pull remotename branchname? Briefly discuss remote-tracking branches and their relevance in your answer.
ANS: Git pull combines the git merge and git fetch commands. When we want to work on a local branch and set it up to track a remote one we should use git fetch then merge it. 

I didn't ask you to do this, but suppose I asked you to make a commit on the 'other' branch. If I wanted you to push this branch, what command would you use?
ANS: I am confused about this question , here I am considering ‘other’ is a branch name here so if I want to push this branch I’ll use git push remotename branchname.

Submit this homework by typing your answers to these questions in a file called hw2.txt. You should commit this on the master branch of your repository. Most importantly, make sure to push the master branch!

Part D. "? 
Why do we call the place we put stashes a "stack? What git stash operation can we do that is usually impossible with stacks?
ANS: When we don’t want to commit to unfinished work we use git stash. We call it a stack because these stashes are placed on top of each other as shown below.
 
Git stash clear makes it impossible to recover stacks.

Create a repository and create branch named githw2. Do the following on this branch (remember to use good commit messages!):

Create files A.txt, B.txt, and C.txt and commit them all.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (master)
$ git checkout -b githw2
Switched to a new branch 'githw2'

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ vi A.txt

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git add .
warning: LF will be replaced by CRLF in A.txt.
The file will have its original line endings in your working directory.

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git commit -m "creating A.txt"
[githw2 eb872fb] creating A.txt
 2 files changed, 4 insertions(+)
 create mode 100644 A.txt
 create mode 160000 hw2

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ vi B.txt

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git add .
warning: LF will be replaced by CRLF in B.txt.
The file will have its original line endings in your working directory.

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git commit -m "creating B.txt"
[githw2 a388590] creating B.txt
 1 file changed, 3 insertions(+)
 create mode 100644 B.txt

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ vi C.txt

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git add .
warning: LF will be replaced by CRLF in C.txt.
The file will have its original line endings in your working directory.

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git commit -m "creating C.txt"
[githw2 c1f8cee] creating C.txt
 1 file changed, 3 insertions(+)
 create mode 100644 C.txt


Make a new branch githw2-stashing, but do not checkout it.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git branch githw2-stashing

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git branch
* githw2
  githw2-stashing
  master
  newbranch


Make some modification to B.txt, delete C.txt, and commit these changes.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ vi B.txt

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git commit -m "making some changes to B.txt"
On branch githw2
Changes not staged for commit:
        modified:   B.txt

no changes added to commit

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git rm C.txt
rm 'C.txt'

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git commit -m "deleting C.txt"
[githw2 bbe12a0] deleting C.txt
 1 file changed, 3 deletions(-)
 delete mode 100644 C.txt



Create a file D.txt, rename A.txt to A2.txt, and commit these changes.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ vi D.txt

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git add .
warning: LF will be replaced by CRLF in B.txt.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in D.txt.
The file will have its original line endings in your working directory.

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git commit -m "creating file D.txt"
[githw2 37c8929] creating file D.txt
 2 files changed, 4 insertions(+), 1 deletion(-)
 create mode 100644 D.txt

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git mv A.txt A2.txt

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git commit -m "changing the file name to A2.txt"
[githw2 48adfde] changing the file name to A2.txt
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename A.txt => A2.txt (100%)


Push this branch to the afs remote. Do not push githw2-stashing yet.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git push origin githw2
Counting objects: 16, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (16/16), 1.55 KiB | 0 bytes/s, done.
Total 16 (delta 4), reused 0 (delta 0)
remote: Resolving deltas: 100% (4/4), done.
To https://github.com/shrutikamati/hw2.git
 * [new branch]      githw2 -> githw2



Checkout the githw6-stashing branch. Modify B.txt, but do not add it to the staging area. Now try to git checkout githw2. What happens? Why? Explain how you could use stashing to solve this problem if all you wanted to do was to checkout githw2, examine B.txt, then return to githw2-stashing and restore the initial state. Then do so.
ANS: kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git checkout githw2-stashing
Switched to branch 'githw2-stashing'

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2-stashing)
$ vi B.txt

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2-stashing)
$ git checkout githw2
error: Your local changes to the following files would be overwritten by checkout:
        B.txt
Please commit your changes or stash them before you switch branches.
Aborting

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2-stashing)
$ git stash
Saved working directory and index state WIP on githw2-stashing: c1f8cee creating C.txt
HEAD is now at c1f8cee creating C.txt

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2-stashing)
$ git checkout githw2
Switched to branch 'githw2'

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ vi B.txt

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2)
$ git checkout githw2-stashing
Switched to branch 'githw2-stashing'

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2-stashing)
$ git stash apply
On branch githw2-stashing
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   B.txt

no changes added to commit (use "git add" and/or "git commit -a")

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2-stashing)
$ git commit -m "committing the stashes"
On branch githw2-stashing
Changes not staged for commit:
        modified:   B.txt

no changes added to commit



As the stashes are not changed it asking us to commit the changes first. When we stash we are changing the changes on top of the stack.	


Push the githw2-stashing branch. Then merge githw2-stashing into githw2, and push githw2.
ANS:
kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2-stashing)
$ git commit -m "committing the stashes"
On branch githw2-stashing
Changes not staged for commit:
        modified:   B.txt

no changes added to commit

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2-stashing)
$

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2-stashing)
$ git push origin githw2-stashing
Total 0 (delta 0), reused 0 (delta 0)
To https://github.com/shrutikamati/hw2.git
 * [new branch]      githw2-stashing -> githw2-stashing

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2-stashing)
$ git checkout githw2
error: Your local changes to the following files would be overwritten by checkout:
        B.txt
Please commit your changes or stash them before you switch branches.
Aborting

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2-stashing)
$ git merge githw2-stashing
Already up-to-date.

kamat@SHRUTI-ThinkPad MINGW64 ~/hw2 (githw2-stashing)
$ git commit -m "committing the changes"
On branch githw2-stashing
Changes not staged for commit:
        modified:   B.txt

no changes added to commit


